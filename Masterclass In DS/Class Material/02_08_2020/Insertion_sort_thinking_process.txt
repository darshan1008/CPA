a[0]                    a[n-1]  : UNSORTED

j = 1; 
while(j < n)
    // resolve: 
    // In this loop, I will write a logic which will keep 
    // a[0] to a[j] sorted at the end of iteration 
    // (before incrementing j)
    

    j = j + 1;
}

Iteration : j = 1 : before j becomes 2 ---> a[0]-a[1] sorted.       iasp(a, 1 + 1) iasp(a, 2)

Iteration : j = 2 : before j becomes 3 ----> a[0] to a[2] sorted.   iasp(a, 2 + 1) iasp(a, 3)

Iteration : j = 3 : before j becomes 4 ----> a[0] to a[3] sorted.   iasp(a, 3 + 1) iasp(a, 4)




Iteration : j = n-1 : before j becomes n ---> a[0] to a[n-1] sorted  iasp(a, n-1+1) iasp(a, n)

then j will become n and we will come out of the loop 

for(j = 1; j < n; ++j){
    iasp(a, j+1); 
}

for(j = 1; j < n; ++j){
    key = a[j]; 
    i = j - 1; 
    while(i > -1 && a[i] > key){
        a[i+1] = a[i]; 
        i = i - 1; 
    }
    a[i+1] = key; 
}

[1] Dry run! code familiarity 

[2] Implementation (keep as general as possible)
implement in such a way that you should be able to 
give large inputs (order of million) to your algorithm 
    [test rigorously, as if to break your algorithm]

[3] Loop invariant based understanding 

#------------------------------------------------------
[4] Run time time analysis 
step counting 
recursive : recurrence relation 
solve 
Notation 