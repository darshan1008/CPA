void merge_sort(int *a, int p, int r){
	int q; 

	if(p < r){
		q = (p + r) / 2; 
		
		// a[p...q] is an unsorted
		merge_sort(a, p, q);
		// a[p...q] -- >SORTED 
		
		merge_sort(a, q+1, r); 
		merge(a, p, q, r); 
	}
}
#--------------------------------------------------------------------------------------------
											ms(a, 0, 7)
											p = 0, r = 7
											p < r : 0 < 7 : T 
											q = (0+7)/2 = 3
				ms(a, p, q)														ms(a, q+1, r)
				ms(a, 0, 3)														ms(a, 4, 7)
				p = 0, r = 3
				p < r : 0 < 3 : T 
				q = (0+3)/2 = 1 

	ms(a, p, q)							ms(a, q+1,r)
	ms(a, 0, 1)							ms(a, 2, 3)
	p = 0, r = 1						p=2,r=3
	p < r : 0 < 1 : T  					p < r : 2 < 3 : T 
	q = (0+1)/2 = 0 					q = (2+3)/2 = 2 

ms(a,p,q)		ms(a,q+1,r)		ms(a,p,q)					ms(a,q+1,r)
ms(a,0,0)		ms(a,1,1)		ms(a,2,2)					ms(a,3,3)
p=0,r=0			p=1,r=1			p=2,r=2						p=3,r=3
p<r:0<0:F		p<r:1<1:F		p<r:F 						p<r:3<3:F
TERM			TERM			TERM						TERM
	merge(a, 0, 0, 1) 					merge(a,2,2,3)
	a[0...1] --> SORTED					a[2...3] --> SORTED

				merge(a, 0, 1, 3)											merge(a, 4, 5, 7)
				a[0...3]---> SORTED											a[4...7]-->SORTED

											merge(a, 0, 3, 7)
											a[0...7] --> SORTED

#-------------------------------------------------------------------------------------------

merge(int *a, int p, int q, int r){
	int *a1 = NULL, *a2 = NULL; 
	int n1, n2; 
	int cnt; 
	int i, j, k; 

	// CODE
}

merge(a, 0, 1, 3); 

STACK FRAME OF ANY FUNCTION 
##############################
ACTUAL PARAMETERS
##############################
POINTERS (ADDRESSES)
##############################
LOCAL VARIABLES 
##############################

POINTERS (ADDRESSES)
[1] Return Address of the caller procedure.  
[2] FRAME POINTER of the caller procedure.

#==========================================

######################################
3 --> int (r)
--------------------
1 --> int (q)
--------------------
0 --> int (p)
--------------------
a --> int* (a)
#######################################
return address in caller procedure 
-----------------------------------
frame pointer of caller procedure 
#######################################
a1 --> int*
---------------------
a2 --> int* 
---------------------
n1 --> int 
---------------------
n2 --> int 
---------------------
cnt --> int 
---------------------
i --> int 
---------------------
j --> int 
---------------------
k --> int
#########################################
merge_sort(a, 0, 3)
#########################################
3(p)
---
0(r)
---
a
---
RA
---
FP
---
q
#############
1
-----
0
-----
a
-----
RA
-----
FP 
-----
q
############

DIVIDE
C = computational problem = sorting a[p...r]

<pre cond> : a[p...r] is unsorted
sort(int* a, int p, int r)
<post cond> : a[p...r] is sorted 

sort(int* a, int p, int r){
	int q; 
	if(p < r){
		q = (p+r)/2; 
		sort(a, p, q); 		// DIVIDE
		sort(a, q+1, r); 	// DIVIDE 
		merge(a, p, q, r);	// CONQUOR 
	}
}

############################################